@using Core.Presentation.Models
@using Core.Presentation.Models.DataTransferObjects.Base
@using Core.Presentation.Models.Models.Base
@using Core.Presentation.ViewComponents.Components.Base
@typeparam TRecord where TRecord: BaseDto, new()
@inherits GenericComponentBase<FormComponentViewModel<TRecord>, TRecord> 

@foreach(var sourceRecord in this.ViewModel.ViewModelState)
{
    <form class="card">

        @{

            if (ViewModel.IncludeFormStatePropsAsHidden)
            {
                foreach (var formStateKeyVal in this.RecordAsKeyValuePairs(sourceRecord).Where(kv => !ViewModel.Fields.Any(field => kv.Key == field.Name)))
                {
                    <input type="hidden" name="@formStateKeyVal.Key" value="@formStateKeyVal.Value" />
                }
            }
        }
        <div class="card-body">
            <div class="row gx-5 gy-3">
                @foreach (var field in ViewModel.Fields)
                {
                    <div class="@ViewModel.ColClass">

                        @switch (field.ControlType)
                        {
                            case ControlType.Input:

                                <div class="row">
                                    <div class="col-auto text-end"><label class="form-label">@field.Label</label></div>
                                    <div class="col">
                                        @if (!field.Required)
                                        {
                                            <input class="form-control" name="@field.Name" value="@ViewModel.Get(sourceRecord.Id, field.Name, typeof(string))"/>
                                        }
                                        else
                                        {
                                            <input required class="form-control" name="@field.Name" value="@ViewModel.Get(sourceRecord.Id, field.Name, typeof(string))" />
                                            <div class="invalid-feedback">This field is required</div>
                                        }

                                    </div>
                                </div>

                                break;
                            case ControlType.Checkbox:

                                <div class="row">
                                    <div class="col-auto text-end"><label class="form-label">@field.Label</label></div>
                                    @if (ViewModel.Get(sourceRecord.Id,field.Name, typeof(bool)))
                                    {
                                        <div class="col-auto text-start"> <input checked type="checkbox" class="form-check-input" name="@field.Name" value="@bool.TrueString" /></div>
                                    }
                                    else
                                    {
                                        <div class="col-auto text-start"> <input type="checkbox" class="form-check-input" name="@field.Name" value="@bool.TrueString" /></div>
                                    }

                                </div>
                                break;
                        }
                    </div>
                }
            </div>
        </div>
        @if (!ViewModel.CollapseFooter)
        {
            <div class="card-footer">
                <button class="btn btn-primary">@ViewModel.SubmitButtonText</button>
            </div>
        }
    </form>
}