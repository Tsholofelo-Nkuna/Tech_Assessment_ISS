@using System.Reflection;
@using System.Globalization;
@using Core.Presentation.Models;
@using System.Text.Json
@using Core.Presentation.Models.DataTransferObjects.Base
@using Core.Presentation.ViewComponents.Components.Base
@typeparam TRecordType where TRecordType : BaseDto, new()
@inherits GenericComponentBase<TableComponentViewModel<TRecordType>, TRecordType>
@{
  
}

<table class="table table-bordered">
    <thead>
        <tr>
            @foreach (var colConfig in ViewModel.ColumnConfigs)
            {
                <th>@(CultureInfo.InvariantCulture.TextInfo.ToTitleCase(colConfig.Name))</th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (!ViewModel.ViewModelState.Any())
        {
            <tr>
                <td colspan="@ViewModel.ColumnConfigs.Count() + 1" class="text-center">
                    No Data
                </td>
            </tr>
        }
        else
        {
            @foreach (var rec in ViewModel.ViewModelState)
            {
                <tr>
                    @foreach (var config in ViewModel.ColumnConfigs)
                    {
                        <td>@ViewModel.Get(rec.Id, config.Index, typeof(string))</td>
                    }
                    <td>
                        <div class="d-flex">
                            <a @onclick="() => OnDelete(rec.Id)" class="btn btn-danger me-2">Delete</a>
                            @if (!rec.Archived)
                            {
                                <a href="@($"/{ViewModel.ArchiveController}/{ViewModel.ArchiveAction}/{rec.Id}")" class="btn btn-secondary me-2">Archive</a>
                            }
                            <a @onclick="() => OnView(rec.Id)" class="btn btn-outline-primary me-2">View</a>
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>