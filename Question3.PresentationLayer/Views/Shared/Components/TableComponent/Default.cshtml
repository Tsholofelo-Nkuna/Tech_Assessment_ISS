@using System.Reflection;
@using System.Globalization;
@model TableComponentViewModel;
@{
     string DisplayColumnValue(string index, object rec )
    {
        var prop = rec.GetType().GetProperty(index);
        if(prop is PropertyInfo validProp and {CanRead: true})
        {
            return (validProp.GetValue(rec) as string) ?? string.Empty;
        }
        else
        {
            return string.Empty;
        }
    }
}

<table class="table table-bordered">
    <thead>
        <tr>
            @foreach(var colConfig in Model.ColumnConfigs)
            {
                <th>@(CultureInfo.InvariantCulture.TextInfo.ToTitleCase(colConfig.Name))</th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (!Model.Data.Any())
        {
            <tr>
                <td colspan="@Model.ColumnConfigs.Count() + 1" class="text-center">
                    No Data
                </td>
            </tr>
        }
        else
        {
            @foreach(var rec in Model.Data)
            {
                <tr>
                    @foreach (var config in Model.ColumnConfigs)
                    {
                        <td>@DisplayColumnValue(config.Index, rec)</td>
                    }
                    <td>
                        <div class="d-flex">
                            <a asp-action="@Model.DeleteAction" asp-controller="@Model.DeleteController" asp-route-id="@rec.Id" class="btn btn-danger me-2">Delete</a>
                            @if(!rec.Archived){
                               <a asp-action="@Model.ArchiveAction" asp-controller="@Model.ArchiveController" asp-route-id="@rec.Id" class="btn btn-secondary me-2">Archive</a>
                            }
                            <a asp-action="@Model.ViewAction" asp-controller="@Model.ViewController" asp-route-id="@rec.Id" class="btn btn-outline-primary me-2">View</a>
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>